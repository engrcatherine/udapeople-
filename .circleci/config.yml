version: 2.1

commands:
  install_ansible:
    description: Install Ansible and awscli
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible


  install_awscli:
    description: Install AWS CLIv2
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

 

  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0



#Destroy environement will distroy any environment not in use.
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo Destroying environment <<parameters.Workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.Workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

#this will revert migerations last migration
  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    parameters:
      Workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_id >>)
            if (( $SUCCESS == 1 )); then
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert
              fi
            
 #Job stage is to build the following jobs on circleci          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0 #image used
    steps:
      - checkout   
      - restore_cache:
          keys: 
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps-{{ checksum "frontend/package-lock.json" }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0 #image used
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
       - image: circleci/node:13.8.0  #image used
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Run test-frontend
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
   docker:
      - image: circleci/node:13.8.0  #image used
   steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Run test-backend
          command: |
            cd backend
            npm install
            npm run test

          
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 #image use
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: scan-frontend pkg
          command: |
            cd frontend
            npm install            
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            #npm audit --audit-level=critical         
             

  scan-backend:
    docker:
      - image: cimg/node:13.8.0   #image used
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: scan-backend pkg
          command: |
            cd backend        
            npm install            
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            #npm audit --audit-level=critical




#Create s3 buckets for frontend, Ec2 for backend and list ip address
  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10   #Executor
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Project=Udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end IP address to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment


#infrastructure configuration sucessful
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.10    #image used
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["18:eb:a3:69:ee:58:5b:83:08:c8:77:b2:9d:ad:f3:25"]
      - attach_workspace:
          at: ~/
      - run:
          name: Run Configure server Ansible play
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment  # Here's where you will add some code to rollback on failure

# To run npm migration then migeration result will be sent to kvdb.io
  run-migrations:
    docker:
      - image: cimg/python:3.10   #image used
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "No migrations are pending" 
            fi  
     # rolls back; should migration fail
      - destroy-environment
      - revert-migrations          


#To Deploy Frontend used
  deploy-frontend:
    docker:
      - image: cimg/python:3.10   #image used
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist            
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
# rolls back; should migration fail
      - destroy-environment
      - revert-migrations 

#To Deploy Backend used the following
  deploy-backend:
    docker:
      - image: cimg/python:3.10   #image used
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-deps]
      - add_ssh_keys:
          fingerprints: ["18:eb:a3:69:ee:58:5b:83:08:c8:77:b2:9d:ad:f3:25"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
# rolls back; should migration fail
      - destroy-environment
      - revert-migrations 
  

#The next is to run a smoke-test on your applications both for backend and frontend
  smoke-test:
    docker:
      - image: cimg/base:stable   #image used
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            if curl --connect-timeout 60 $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              # This is the intentional error, if "Welcome" is indeed in the response this step will exit with exit code 1
              exit 0
            else
              exit 1
            fi
# rolls back; should migration fail
      - destroy-environment
          # workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations  
          # workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

#You need to update Cloudfront and save old workflow to kvdb.io
  cloudfront-update:
    docker:
      - image: cimg/base:stable   #image used
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update -y
            sudo apt install -y curl
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeeplefirst \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo Current Workflow ID: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - destroy-environment
      - revert-migrations
         

#Application Cleanup for all old files and stacks
  cleanup:
    docker:                                                                           
      - image: cimg/base:stable   #image used
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"

            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            
# =====================================================================================
  configure-node-exporter:
    docker:
      - image: cimg/python:3.10     #image used  
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["18:eb:a3:69:ee:58:5b:83:08:c8:77:b2:9d:ad:f3:25"]
      
      - attach_workspace:
          at: ~/
      - run:
          name: Configure node_exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook configure-prometheus-node-exporter.yml -i inventory.txt

  deploy-prometheus-server:
    docker:
      - image: cimg/python:3.10         #image used
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["18:eb:a3:69:ee:58:5b:83:08:c8:77:b2:9d:ad:f3:25"]
      # - run:
      #     name: Install dependencies
      #     command: |
      #       yum update -y
      #       yum install -y  tar gzip
      #       curl -sL https://rpm.nodesource.com/setup_13.x | bash -
      #       yum install -y nodejs
      #       amazon-linux-extras install -y epel
      #       yum install -y ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Spin up EC2 server for prometheus
          command: |
            echo "[server]" >> .circleci/ansible/inventory.txt
            aws cloudformation deploy \
              --template-file .circleci/files/prometheus-server.yml \
              --tags project=prometheus \
              --stack-name udapeople-prometheus-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Append IP to inventory file
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=prometheus" \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Install prometheus and alertmanager on server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-prometheus-alertmanager.yml  


#Workflows are listed below the above builds will not run without a workflow. List workflow and run jobs step by steps.            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]  #add env in circleci #ansible/files/be/fe
          filters:
            branches:
              only: [main]            
      - configure-infrastructure:
          requires: [deploy-infrastructure]      #ansible/roles/cofig-server/main.yml
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]